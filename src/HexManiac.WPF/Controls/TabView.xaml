<UserControl x:Class="HavenSoft.HexManiac.WPF.Controls.TabView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:hsv="clr-namespace:HavenSoft.HexManiac.WPF.Resources"
      xmlns:hsg3hvmtr="clr-namespace:HavenSoft.HexManiac.Core.ViewModels.Tools;assembly=HexManiac.Core"
      xmlns:hsg3hw="clr-namespace:HavenSoft.HexManiac.WPF.Windows"
      xmlns:hsg3hv="clr-namespace:HavenSoft.HexManiac.WPF.Controls"
      PreviewMouseDown="ClearPopup"
      DataContextChanged="HandleDataContextChanged">
   <UserControl.Resources>
      <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
      <hsg3hv:IntegerToHexConverter x:Key="Hex"/>
      <hsg3hv:EqualityToBooleanConverter x:Key="Equality" />
   </UserControl.Resources>
   <DockPanel>
      <!-- Bottom Bar -->
      <Grid DockPanel.Dock="Bottom">
         <DockPanel LastChildFill="False">
            <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
               <TextBlock Text="Free Space:"/>
               <TextBox Text="{Binding FreeSpaceStart, Converter={StaticResource Hex}}" Width="70">
                  <TextBox.InputBindings>
                     <KeyBinding Key="Enter" Command="{Binding GotoFreeSpaceStart}"/>
                  </TextBox.InputBindings>
                  <TextBox.ToolTip>
                     <TextBlock>
                        Free Space searching will begin at <Run Text="{Binding FreeSpaceStart, Converter={StaticResource Hex}}"/> and continue until free space is found.
                        <LineBreak/>
                        Whenever something is moved to free space, this will change to the last used address.
                     </TextBlock>
                  </TextBox.ToolTip>
               </TextBox>
               <Button Command="{hsv:MethodCommand FindFreeSpace}" CommandParameter="{DynamicResource FileSystem}" ToolTip="Find Free Space">
                  <Path Data="{hsv:Icon Search}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
               </Button>
            </StackPanel>
            <TextBlock DockPanel.Dock="Left" Text="{Binding SelectedAddress}" MouseRightButtonUp="AddressShowMenu" Margin="10,0,0,0"/>
            <Grid HorizontalAlignment="Right" DockPanel.Dock="Right">
               <TextBlock Margin="10,0,0,0" Text="{Binding SelectedBytes}" MouseRightButtonUp="BytesShowMenu"/>
            </Grid>
         </DockPanel>
         <Rectangle Visibility="{Binding UpdateInProgress, Converter={StaticResource BoolToVisibility}}">
            <Rectangle.Fill>
               <LinearGradientBrush>
                  <GradientStop Offset="0" Color="{DynamicResource Stream2Color}"/>
                  <GradientStop Offset="{Binding Progress}" Color="{DynamicResource Stream2Color}"/>
                  <GradientStop Offset="{Binding Progress}" Color="Transparent"/>
                  <GradientStop Offset="1" Color="Transparent"/>
               </LinearGradientBrush>
            </Rectangle.Fill>
         </Rectangle>
      </Grid>
      <!-- Tool Headers -->
      <StackPanel DockPanel.Dock="Left" Visibility="{Binding HasTools, Converter={StaticResource BoolToVisibility}}">
         <StackPanel.Resources>
            <RotateTransform x:Key="Sideways" Angle="-90"/>
         </StackPanel.Resources>
         <Button Content="Table" Command="{Binding Tools.TableToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="0">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Text" Command="{Binding Tools.StringToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="1">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Image" Command="{Binding Tools.SpriteToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="2">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
         <Button Content="Code" Command="{Binding Tools.CodeToolCommand}" Margin="0,2" LayoutTransform="{StaticResource Sideways}">
            <Button.Style>
               <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="3">
                        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Button.Style>
         </Button>
      </StackPanel>
      <Grid>
         <Grid.ColumnDefinitions>
            <ColumnDefinition Width="275" Name="LeftToolsPane">
               <ColumnDefinition.Style>
                  <Style TargetType="ColumnDefinition">
                     <Style.Triggers>
                        <DataTrigger Binding="{Binding Tools.SelectedIndex}" Value="-1">
                           <Setter Property="MaxWidth" Value="0"/>
                        </DataTrigger>
                     </Style.Triggers>
                  </Style>
               </ColumnDefinition.Style>
            </ColumnDefinition>
            <ColumnDefinition Width="4"/>
            <ColumnDefinition/>
         </Grid.ColumnDefinitions>
         <!-- Left Panel -->
         <Grid DataContext="{Binding Tools}" HorizontalAlignment="Stretch">
            <Grid.Style>
               <Style TargetType="Grid">
                  <Style.Triggers>
                     <DataTrigger Binding="{Binding SelectedIndex}" Value="-1">
                        <Setter Property="Visibility" Value="Collapsed"/>
                     </DataTrigger>
                  </Style.Triggers>
               </Style>
            </Grid.Style>
            <Popup Name="CodeContentsPopup" StaysOpen="False">
               <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" Background="{DynamicResource Background}">
                  <StackPanel Width="300">
                     <StackPanel Orientation="Horizontal">
                        <TextBlock Name="CodeContentsPopupKeywordText" FontFamily="Consolas" FontWeight="Bold" Foreground="{DynamicResource Accent}"/>
                        <TextBlock Name="CodeContentsPopupArgsText" FontFamily="Consolas"/>
                     </StackPanel>
                     <TextBlock Name="CodeContentsPopupDocumentationText" FontFamily="Consolas" TextWrapping="Wrap" FontStyle="Italic" Foreground="{DynamicResource Secondary}"/>
                  </StackPanel>
               </Border>
            </Popup>
            <DockPanel Name="TableToolPanel">
               <DockPanel.Style>
                  <Style TargetType="DockPanel">
                     <Setter Property="Visibility" Value="Collapsed"/>
                     <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedIndex}" Value="0">
                           <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                     </Style.Triggers>
                  </Style>
               </DockPanel.Style>
               <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Center">
                  <ComboBox Name="SectionSelector" ItemsSource="{Binding TableTool.TableSections}" DropDownClosed="TableSelected" SelectedIndex="{Binding TableTool.SelectedTableSection}" MaxWidth="200" Margin="0,0,5,0" />
                  <ComboBox Name="TableSelector" ItemsSource="{Binding TableTool.TableList}" DropDownClosed="TableSelected" SelectedIndex="{Binding TableTool.SelectedTableIndex}" MaxWidth="200" />
               </StackPanel>
               <Viewbox HorizontalAlignment="Center" Margin="0,2" DockPanel.Dock="Top" StretchDirection="DownOnly">
                  <TextBlock Text="{Binding TableTool.CurrentElementName}" TextAlignment="Center" />
               </Viewbox>
               <hsg3hv:EditableComboBox DockPanel.Dock="Top" HorizontalAlignment="Center"
                  DataContext="{Binding TableTool.CurrentElementSelector}" />
               <Grid DockPanel.Dock="Top">
                  <Button Margin="5" Content="Previous" Command="{Binding TableTool.Previous}" HorizontalAlignment="Left"/>
                  <Button Margin="5" Content="Next" Command="{Binding TableTool.Next}" HorizontalAlignment="Right"/>
                  <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="5">
                     <Border ToolTipService.InitialShowDelay="0">
                        <Border.ToolTip>
                           <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                              <TextBlock TextAlignment="Left">
                                 Select the last element of the table <LineBreak/>
                                 and press this to extend the table.
                              </TextBlock>
                           </ToolTip>
                        </Border.ToolTip>
                        <Button Command="{Binding TableTool.Append}">
                           <Button.Content>
                              <StackPanel Orientation="Horizontal">
                                 <TextBlock Text="Add" Margin="0,0,2,0"/>
                                 <TextBox Text="{Binding TableTool.AddCount, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0"/>
                                 <TextBlock Text="New" Margin="2,0,0,0"/>
                              </StackPanel>
                           </Button.Content>
                        </Button>
                     </Border>
                     <StackPanel>
                        <RepeatButton Height="12" Width="12" Padding="1" Command="{Binding TableTool.IncrementAdd}">
                           <Path Data="{hsv:Icon ThinPlus}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                        </RepeatButton>
                        <RepeatButton Height="12" Width="12" Padding="1" Command="{Binding TableTool.DecrementAdd}">
                           <Path Data="{hsv:Icon ThinMinus}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                        </RepeatButton>
                     </StackPanel>
                  </StackPanel>
               </Grid>
               <ScrollViewer Name="TableScrollViewer" VerticalScrollBarVisibility="Visible">
                  <StackPanel>
                     <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                        <Grid.ToolTip>
                           <ToolTip>
                              Search for specific fields
                           </ToolTip>
                        </Grid.ToolTip>
                        <Grid.ColumnDefinitions>
                           <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                           <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Filter:" Margin="5,0" Grid.Column="0"/>
                        <TextBox Margin="5,0" Grid.Column="1" Text="{Binding TableTool.FieldFilter, UpdateSourceTrigger=PropertyChanged}"/>
                     </Grid>
                     <ItemsControl ItemsSource="{Binding TableTool.Children}" Grid.IsSharedSizeScope="True">
                        <ItemsControl.ItemsPanel>
                           <ItemsPanelTemplate>
                              <hsg3hv:ColumnStackPanel VerticalAlignment="Top" MinimumColumnWidth="245" ColumnMargin="10" HeaderMargin="10"/>
                           </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                           <Style>
                              <Setter Property="Panel.ZIndex" Value="{Binding Path=Content.ZIndex, RelativeSource={RelativeSource Self}}"/>
                           </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.Resources>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:SplitterArrayElementViewModel}">
                              <DockPanel Name="ContainerPanel" Background="Transparent" hsg3hv:ColumnStackPanel.IsHeader="True" Visibility="{Binding ShowSection, Converter={StaticResource BoolToVisibility}}">
                                 <DockPanel.Style>
                                    <Style TargetType="DockPanel">
                                       <Style.Triggers>
                                          <Trigger Property="IsMouseOver" Value="True">
                                             <Setter Property="Tag" Value="Magic"/>
                                          </Trigger>
                                       </Style.Triggers>
                                    </Style>
                                 </DockPanel.Style>
                                 <DockPanel.ContextMenu>
                                    <ContextMenu>
                                       <MenuItem Header="Expand All" Command="{Binding ExpandAll}"/>
                                       <MenuItem Header="Collapse All" Command="{Binding CollapseAll}"/>
                                    </ContextMenu>
                                 </DockPanel.ContextMenu>
                                 <Button DockPanel.Dock="Right" Command="{Binding FollowLink}" Width="20" Height="20" IsTabStop="False">
                                    <Button.ToolTip>
                                       <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                          <TextBlock TextAlignment="Left">
                                             Jump to the table<LineBreak/>
                                             containing this data.
                                          </TextBlock>
                                       </ToolTip>
                                    </Button.ToolTip>
                                    <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                                 </Button>
                                 <Expander VerticalAlignment="Center" IsExpanded="{Binding Visible}" LayoutTransform="0,1,-1,0,0,0" Tag="{Binding Tag, ElementName=ContainerPanel}"/>
                                 <Viewbox StretchDirection="DownOnly" Margin="5">
                                    <TextBlock Text="{Binding SectionName}" FontSize="20">
                                       <TextBlock.InputBindings>
                                          <MouseBinding MouseAction="LeftClick" Command="{Binding ToggleVisibility}"/>
                                          <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding ToggleVisibility}"/>
                                       </TextBlock.InputBindings>
                                    </TextBlock>
                                 </Viewbox>
                              </DockPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:FieldArrayElementViewModel}">
                              <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                 </Grid.ColumnDefinitions>
                                 <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                 <UserControl Margin="5,0" Grid.Column="1" IsTabStop="True" Focusable="True"
                                    GotKeyboardFocus="UpdateFieldTextBox" LostKeyboardFocus="UpdateFieldTextBox"
                                    MouseEnter="UpdateFieldTextBox" MouseLeave="UpdateFieldTextBox"
                                    GotFocus="UpdateFieldTextBox" LostFocus="UpdateFieldTextBox">
                                    <hsg3hv:TextBoxLookAlike />
                                 </UserControl>
                                 <Button Grid.Column="2" Command="{Binding Accept}" Width="20" Height="20" IsTabStop="False">
                                    <Button.Style>
                                       <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                          <Setter Property="Visibility" Value="Collapsed"/>
                                          <Style.Triggers>
                                             <DataTrigger Binding="{Binding Type}" Value="Address">
                                                <Setter Property="Visibility" Value="Visible"/>
                                             </DataTrigger>
                                          </Style.Triggers>
                                       </Style>
                                    </Button.Style>
                                    <Button.ToolTip>
                                       <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                          <TextBlock TextAlignment="Left">
                                             Jump to the pointer's destination<LineBreak/>
                                          </TextBlock>
                                       </ToolTip>
                                    </Button.ToolTip>
                                    <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                                 </Button>
                              </Grid>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:ColorFieldArrayElementViewModel}">
                              <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                 </Grid.ColumnDefinitions>
                                 <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                 <Rectangle Width="14" Height="14" Grid.Column="1"
                                    Stroke="{DynamicResource Primary}" StrokeThickness="1"
                                    Fill="{Binding Color, Converter={StaticResource PaletteColorConverter}}"
                                    MouseLeftButtonUp="ShowColorFieldSwatch"/>
                                 <UserControl Margin="5,0" Grid.Column="2"
                                    GotKeyboardFocus="UpdateFieldTextBox" LostKeyboardFocus="UpdateFieldTextBox"
                                    MouseEnter="UpdateFieldTextBox" MouseLeave="UpdateFieldTextBox"
                                    GotFocus="UpdateFieldTextBox" LostFocus="UpdateFieldTextBox">
                                    <hsg3hv:TextBoxLookAlike />
                                 </UserControl>
                              </Grid>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:ComboBoxArrayElementViewModel}">
                              <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}" PreviewKeyDown="ComboBoxArrayElementViewKeyDown">
                                 <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                 </Grid.ColumnDefinitions>
                                 <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                 <ComboBox SelectedIndex="{Binding SelectedIndex}" ItemsSource="{Binding Options}" Margin="0,0,2,0" Grid.Column="1"
                                           IsEditable="{Binding CanFilter}" Text="{Binding FilterText}" IsTextSearchEnabled="False" PreviewTextInput="ComboBoxArrayElementViewTextInput">
                                    <ComboBox.ItemTemplate>
                                       <DataTemplate>
                                          <StackPanel>
                                             <TextBlock Text="{Binding Text}" Visibility="{Binding DisplayAsText, Converter={StaticResource BoolToVisibility}}"/>
                                             <hsg3hv:PixelImage x:Name="OptionImage">
                                                <hsg3hv:PixelImage.Style>
                                                   <Style TargetType="hsg3hv:PixelImage">
                                                      <Style.Triggers>
                                                         <DataTrigger Binding="{Binding DisplayAsText}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                         </DataTrigger>
                                                      </Style.Triggers>
                                                   </Style>
                                                </hsg3hv:PixelImage.Style>
                                             </hsg3hv:PixelImage>
                                          </StackPanel>
                                       </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                 </ComboBox>
                                 <Button Grid.Column="2" Command="{Binding GotoSource}" Width="20" Height="20" IsTabStop="False">
                                    <Button.ToolTip>
                                       <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                          <TextBlock TextAlignment="Left">
                                             Jump to the table used as<LineBreak/>
                                             a source for the options.
                                          </TextBlock>
                                       </ToolTip>
                                    </Button.ToolTip>
                                    <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                                 </Button>
                              </Grid>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:BitListArrayElementViewModel}">
                              <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <Grid HorizontalAlignment="Stretch" Margin="2">
                                    <Grid.ColumnDefinitions>
                                       <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                                       <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                    <Button Grid.Column="1" HorizontalAlignment="Right" Command="{Binding LinkCommand}" Width="20" Height="20">
                                       <Button.ToolTip>
                                          <ToolTip Background="{DynamicResource Backlight}" BorderBrush="{DynamicResource Accent}" BorderThickness="1">
                                             <TextBlock TextAlignment="Left">
                                                Jump to the table used as<LineBreak/>
                                                a source for the options.
                                             </TextBlock>
                                          </ToolTip>
                                       </Button.ToolTip>
                                       <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                                    </Button>
                                 </Grid>
                                 <TextBlock Foreground="{DynamicResource Error}" TextWrapping="Wrap"
                                    Text="{Binding ErrorText}"
                                    Visibility="{Binding IsInError, Converter={StaticResource BoolToVisibility}}"/>
                                 <ItemsControl ItemsSource="{Binding}">
                                    <ItemsControl.ContextMenu>
                                       <ContextMenu>
                                          <MenuItem Header="Check All" Command="{Binding SelectAll}"/>
                                          <MenuItem Header="Uncheck All" Command="{Binding UnselectAll}"/>
                                       </ContextMenu>
                                    </ItemsControl.ContextMenu>
                                    <ItemsControl.ItemsPanel>
                                       <ItemsPanelTemplate>
                                          <WrapPanel/>
                                       </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                       <DataTemplate>
                                          <CheckBox Margin="5,1,0,1" Width="115" IsChecked="{Binding IsChecked}" Content="{Binding BitLabel}" KeyUp="CheckboxKeyUp"/>
                                       </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                 </ItemsControl>
                              </StackPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:StreamElementViewModel}">
                              <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <hsg3hv:CommonTableStreamControl />
                                 <Grid Margin="20,2,2,2" Background="{DynamicResource Backlight}">
                                    <TextBox Name="StreamTextBox" UndoLimit="0" Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}"
                                       Background="Transparent"
                                       VerticalAlignment="Top"
                                       CaretBrush="{DynamicResource Secondary}"
                                       AcceptsReturn="True" FontFamily="Consolas"
                                       Visibility="{Binding ShowContent, Converter={StaticResource BoolToVisibility}}">
                                       <TextBox.InputBindings>
                                          <KeyBinding Modifiers="Ctrl" Key="Z" Command="{Binding Undo}"/>
                                          <KeyBinding Modifiers="Ctrl" Key="Y" Command="{Binding Redo}"/>
                                       </TextBox.InputBindings>
                                    </TextBox>
                                    <hsg3hv:AutocompleteOverlay Target="{Binding ElementName=StreamTextBox}"/>
                                 </Grid>
                              </StackPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:ButtonArrayElementViewModel}">
                              <Button HorizontalAlignment="Center" Margin="5"
                                 Content="{Binding Text}" ToolTip="{Binding Text}" Command="{Binding Command}"
                                 Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}"/>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:SpriteElementViewModel}">
                              <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <hsg3hv:CommonTableStreamControl />
                                 <ItemsControl ItemsSource="{Binding PaletteSelection}" Visibility="{Binding HasMultiplePalettes, Converter={StaticResource BoolToVisibility}}" HorizontalAlignment="Center" IsTabStop="False">
                                    <ItemsControl.ItemsPanel>
                                       <ItemsPanelTemplate>
                                          <StackPanel Orientation="Horizontal" />
                                       </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                       <DataTemplate>
                                          <RadioButton IsChecked="{Binding Selected}" ToolTip="{Binding Name}" />
                                       </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                 </ItemsControl>
                                 <DockPanel>
                                    <StackPanel VerticalAlignment="Center">
                                       <Button Content="Import" Command="{Binding ImportPair}" CommandParameter="{DynamicResource FileSystem}" Margin="5"/>
                                       <Grid Margin="5">
                                          <Button Content="Export" Command="{Binding ExportPair}" CommandParameter="{DynamicResource FileSystem}">
                                             <Button.Style>
                                                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                   <Style.Triggers>
                                                      <DataTrigger Binding="{Binding CanExportMany}" Value="True">
                                                         <Setter Property="Visibility" Value="Collapsed"/>
                                                      </DataTrigger>
                                                   </Style.Triggers>
                                                </Style>
                                             </Button.Style>
                                          </Button>
                                          <Menu Visibility="{Binding CanExportMany, Converter={StaticResource BoolToVisibility}}" Background="{DynamicResource Backlight}">
                                             <Menu.Style>
                                                <Style TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}">
                                                   <Setter Property="BorderThickness" Value="1"/>
                                                   <Style.Triggers>
                                                      <Trigger Property="IsMouseOver" Value="True">
                                                         <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                                                      </Trigger>
                                                   </Style.Triggers>
                                                </Style>
                                             </Menu.Style>
                                             <MenuItem Header="Export" Margin="0,1,0,0" Background="{DynamicResource Backlight}">
                                                <MenuItem Header="Single Page" Command="{Binding ExportPair}" CommandParameter="{DynamicResource FileSystem}"/>
                                                <MenuItem Header="All Pages" Command="{Binding ExportMany}" CommandParameter="{DynamicResource FileSystem}"/>
                                             </MenuItem>
                                          </Menu>
                                       </Grid>
                                    </StackPanel>
                                    <hsg3hv:PixelImage SnapsToDevicePixels="True" />
                                 </DockPanel>
                                 <DockPanel Visibility="{Binding ShowPageControls, Converter={StaticResource BoolToVisibility}}">
                                    <Button Content="Previous" Command="{Binding PreviousPage}" DockPanel.Dock="Left"/>
                                    <Button Content="+" Command="{Binding AddPage}" DockPanel.Dock="Right" ToolTip="Add a new page to this sprite and palette"/>
                                    <Button Content="Next" Command="{Binding NextPage}" DockPanel.Dock="Right"/>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                       <Button Content="-" Command="{Binding DeletePage}" ToolTip="Delete the current page of this sprite and palette"/>
                                       <Button Command="{Binding OpenEditor}" ToolTip="Open image in editor" Padding="0">
                                          <Path Data="{hsv:Icon Pencil}" Fill="{DynamicResource Primary}" Stretch="Uniform"/>
                                       </Button>
                                    </StackPanel>
                                 </DockPanel>
                              </StackPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:PaletteElementViewModel}">
                              <StackPanel PreviewMouseDown="ActivatePalette"  Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <hsg3hv:CommonTableStreamControl />
                                 <hsg3hv:PaletteControl DataContext="{Binding Colors}" />
                                 <DockPanel Visibility="{Binding ShowPageControls, Converter={StaticResource BoolToVisibility}}">
                                    <Button Content="Previous" Command="{Binding PreviousPage}" DockPanel.Dock="Left"/>
                                    <Button Content="+" Command="{Binding AddPage}" DockPanel.Dock="Right" ToolTip="Add a new page to this sprite and palette"/>
                                    <Button Content="Next" Command="{Binding NextPage}" DockPanel.Dock="Right"/>
                                    <Button Content="-" Command="{Binding DeletePage}" HorizontalAlignment="Center" ToolTip="Delete the current page of this sprite and palette"/>
                                 </DockPanel>
                              </StackPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:TrainerPokemonTeamElementViewModel}">
                              <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <hsg3hv:CommonTableStreamControl />
                                 <Grid Margin="20,2,2,2" Background="{DynamicResource Backlight}">
                                    <Viewbox HorizontalAlignment="Right" Height="{Binding ActualHeight, ElementName=StreamTextBox}" Stretch="Uniform" IsHitTestVisible="False" Opacity=".5">
                                       <ItemsControl ItemsSource="{Binding Visualizations}">
                                          <ItemsControl.ItemTemplate>
                                             <DataTemplate>
                                                <hsg3hv:PixelImage TransparentBrush="{DynamicResource Backlight}"/>
                                             </DataTemplate>
                                          </ItemsControl.ItemTemplate>
                                       </ItemsControl>
                                    </Viewbox>
                                    <TextBox Name="StreamTextBox" UndoLimit="0" Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}"
                                       Background="Transparent"
                                       VerticalAlignment="Top"
                                       CaretBrush="{DynamicResource Secondary}"
                                       AcceptsReturn="True" FontFamily="Consolas"
                                       Visibility="{Binding ShowContent, Converter={StaticResource BoolToVisibility}}">
                                       <TextBox.InputBindings>
                                          <KeyBinding Modifiers="Ctrl" Key="Z" Command="{Binding Undo}"/>
                                          <KeyBinding Modifiers="Ctrl" Key="Y" Command="{Binding Redo}"/>
                                       </TextBox.InputBindings>
                                    </TextBox>
                                    <hsg3hv:AutocompleteOverlay Target="{Binding ElementName=StreamTextBox}"/>
                                 </Grid>
                                 <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,2,0,0">
                                    <Button Command="{Binding SetDefaultMoves}" Margin="0,0,4,0" Content="Default Moves"/>
                                    <Button Command="{Binding SetDefaultItems}" Content="Default Items"/>
                                 </StackPanel>
                              </StackPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:TupleArrayElementViewModel}">
                              <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <TextBlock Text="{Binding Name}" Margin="5,0"/>
                                 <ItemsControl ItemsSource="{Binding Children}">
                                    <ItemsControl.ItemsPanel>
                                       <ItemsPanelTemplate>
                                          <WrapPanel/>
                                       </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.Resources>
                                       <DataTemplate DataType="{x:Type hsg3hvmtr:EnumTupleElementViewModel}">
                                          <Grid HorizontalAlignment="Stretch" Margin="2" Width="120" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                             <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="2*"/>
                                             </Grid.ColumnDefinitions>
                                             <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                             <ComboBox ItemsSource="{Binding Options}" SelectedIndex="{Binding SelectedIndex}" Grid.Column="1"
                                                       IsEditable="True" Text="{Binding FilterText}" IsTextSearchEnabled="False" PreviewTextInput="ComboBoxTupleElementTextInput"/>
                                          </Grid>
                                       </DataTemplate>
                                       <DataTemplate DataType="{x:Type hsg3hvmtr:NumericTupleElementViewModel}">
                                          <Grid HorizontalAlignment="Stretch" Margin="2" Width="120" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                             <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="2*"/>
                                             </Grid.ColumnDefinitions>
                                             <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                             <UserControl Margin="5,0" Grid.Column="1" IsTabStop="True" Focusable="True"
                                                GotKeyboardFocus="UpdateFieldTextBox" LostKeyboardFocus="UpdateFieldTextBox"
                                                MouseEnter="UpdateFieldTextBox" MouseLeave="UpdateFieldTextBox"
                                                GotFocus="UpdateFieldTextBox" LostFocus="UpdateFieldTextBox">
                                                <hsg3hv:TextBoxLookAlike />
                                             </UserControl>
                                          </Grid>
                                       </DataTemplate>
                                       <DataTemplate DataType="{x:Type hsg3hvmtr:CheckBoxTupleElementViewModel}">
                                          <CheckBox Margin="2" Width="120" Content="{Binding Name}" IsChecked="{Binding IsChecked}" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}"/>
                                       </DataTemplate>
                                    </ItemsControl.Resources>
                                 </ItemsControl>
                              </StackPanel>
                           </DataTemplate>
                           <DataTemplate DataType="{x:Type hsg3hvmtr:CalculatedElementViewModel}">
                              <StackPanel Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                 <Grid HorizontalAlignment="Stretch" Margin="2" Visibility="{Binding Visible, Converter={StaticResource BoolToVisibility}}">
                                    <Grid.ColumnDefinitions>
                                       <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                                       <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{Binding Name}" Margin="5,0" Grid.Column="0"/>
                                    <TextBlock Text="{Binding CalculatedValue}" HorizontalAlignment="Right" Grid.Column="1"/>
                                 </Grid>
                                 <Expander Margin="20,0,0,5" HorizontalAlignment="Left">
                                    <Expander.Header>
                                       <TextBlock>
                                          <Run>How's it Calculated?</Run>
                                       </TextBlock>
                                    </Expander.Header>
                                    <StackPanel HorizontalAlignment="Left">
                                       <TextBlock FontStyle="Italic" HorizontalAlignment="Left">
                                          <Run>(Operator </Run>
                                          <Run Text="{Binding Operator, Mode=OneWay}"/>
                                          <Run Text=")"/>
                                       </TextBlock>
                                       <ItemsControl ItemsSource="{Binding Operands}">
                                          <ItemsControl.ItemTemplate>
                                             <DataTemplate>
                                                <DockPanel>
                                                   <Button DockPanel.Dock="Right" Command="{Binding JumpTo}" Width="20" Height="20" IsTabStop="False">
                                                      <Path Data="{hsv:Icon RightArrow}" Fill="{DynamicResource Secondary}" Stretch="Uniform"/>
                                                   </Button>
                                                   <TextBlock Text="{Binding Text}"/>
                                                </DockPanel>
                                             </DataTemplate>
                                          </ItemsControl.ItemTemplate>
                                       </ItemsControl>
                                    </StackPanel>
                                 </Expander>
                              </StackPanel>
                           </DataTemplate>
                        </ItemsControl.Resources>
                     </ItemsControl>
                  </StackPanel>
               </ScrollViewer>
            </DockPanel>
            <DockPanel Name="StringToolPanel">
               <DockPanel.Style>
                  <Style TargetType="DockPanel">
                     <Setter Property="Visibility" Value="Collapsed"/>
                     <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedIndex}" Value="1">
                           <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                     </Style.Triggers>
                  </Style>
               </DockPanel.Style>
               <TextBlock Text="Address:" Margin="5,15,0,0" DockPanel.Dock="Top"/>
               <TextBox Text="{Binding StringTool.Address, Converter={StaticResource Hex}, UpdateSourceTrigger=PropertyChanged}" Margin="5" DockPanel.Dock="Top"/>
               <TextBlock DockPanel.Dock="Top" Text="{Binding StringTool.Message}" HorizontalAlignment="Center" TextWrapping="Wrap" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
               <Button Margin="0,3" Command="{Binding StringTool.CheckIsText}" Content="Show As Text" HorizontalAlignment="Right" DockPanel.Dock="Top" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
               <Button Command="{Binding StringTool.InsertText}" Content="Insert New Text" HorizontalAlignment="Right" DockPanel.Dock="Top" Visibility="{Binding StringTool.ShowMessage, Converter={StaticResource BoolToVisibility}}"/>
               <TextBlock Text="Content:" Margin="5,30,0,0" DockPanel.Dock="Top"/>

               <Button Command="{Binding StringTool.Search}" Margin="5,0" Content="Search" HorizontalAlignment="Right" DockPanel.Dock="Bottom" />
               <TextBox Margin="5,0" FontFamily="Consolas" Text="{Binding StringTool.SearchText, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding StringTool.Enabled}" DockPanel.Dock="Bottom">
                  <TextBox.InputBindings>
                     <KeyBinding Key="Return" Command="{Binding StringTool.Search}"/>
                     <KeyBinding Key="F3" Command="{Binding StringTool.Search}"/>
                  </TextBox.InputBindings>
               </TextBox>
               <TextBlock Text="Search:" Margin="5,0" DockPanel.Dock="Bottom"/>

               <Grid Margin="5,5" MinHeight="50">
                  <TextBox Name="StringToolTextBox" AcceptsReturn="True" TextWrapping="NoWrap" FontFamily="Consolas" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" UndoLimit="0"
                     SelectionChanged="StringToolContentSelectionChanged"
                     LostFocus="ShowManualSelection"
                     GotFocus="HideManualSelection"
                     ScrollViewer.ScrollChanged="UpdateManualSelectionFromScroll"
                     IsEnabled="{Binding StringTool.Enabled}"
                     Text="{Binding StringTool.Content, UpdateSourceTrigger=PropertyChanged}" />
                  <Rectangle Name="ManualHighlight" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="14" Fill="{DynamicResource Accent}" Opacity=".4"/>
                  <hsg3hv:AutocompleteOverlay Target="{Binding ElementName=StringToolTextBox}"/>
               </Grid>
            </DockPanel>
            <ScrollViewer Name="ImageToolPanel" VerticalScrollBarVisibility="Visible">
               <ScrollViewer.Style>
                  <Style TargetType="ScrollViewer">
                     <Setter Property="Visibility" Value="Collapsed"/>
                     <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedIndex}" Value="2">
                           <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                     </Style.Triggers>
                  </Style>
               </ScrollViewer.Style>
               <StackPanel>
                  <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                     <Button Content="Import" Command="{Binding SpriteTool.ImportPair}" CommandParameter="{DynamicResource FileSystem}" Margin="5"/>
                     <Button Content="Edit" Command="{Binding SpriteTool.OpenInImageTab}" CommandParameter="{DynamicResource FileSystem}" Margin="5"/>
                     <Grid Margin="5">
                        <Button Content="Export" Command="{Binding SpriteTool.ExportPair}" CommandParameter="{DynamicResource FileSystem}">
                           <Button.Style>
                              <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                 <Style.Triggers>
                                    <DataTrigger Binding="{Binding SpriteTool.CanExportMany}" Value="True">
                                       <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                 </Style.Triggers>
                              </Style>
                           </Button.Style>
                        </Button>
                        <Menu Visibility="{Binding SpriteTool.CanExportMany, Converter={StaticResource BoolToVisibility}}" Background="{DynamicResource Backlight}">
                           <Menu.Style>
                              <Style TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}">
                                 <Setter Property="BorderThickness" Value="1"/>
                                 <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                       <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                                    </Trigger>
                                 </Style.Triggers>
                              </Style>
                           </Menu.Style>
                           <MenuItem Header="Export" Margin="0,1,0,0">
                              <MenuItem Header="Single Page" Command="{Binding SpriteTool.ExportPair}" CommandParameter="{DynamicResource FileSystem}"/>
                              <MenuItem Header="All Pages" Command="{Binding SpriteTool.ExportMany}" CommandParameter="{DynamicResource FileSystem}"/>
                           </MenuItem>
                        </Menu>
                     </Grid>
                  </StackPanel>
                  <!-- Sprite Address -->
                  <UniformGrid Columns="2" Margin="5,15,5,1">
                     <TextBlock VerticalAlignment="Center" Text="Image Address:" />
                     <TextBox Text="{Binding SpriteTool.SpriteAddressText, UpdateSourceTrigger=PropertyChanged}" Margin="5">
                        <TextBox.InputBindings>
                           <KeyBinding Key="Return" Command="{Binding SpriteTool.GotoSpriteAddress}" />
                        </TextBox.InputBindings>
                     </TextBox>
                  </UniformGrid>

                  <!-- Sprite Properties -->
                  <StackPanel Visibility="{Binding SpriteTool.ShowSpriteProperties, Converter={StaticResource BoolToVisibility}}">
                     <UniformGrid Columns="2">
                        <CheckBox Margin="5,1" Content="256 Color Image" IsChecked="{Binding SpriteTool.SpriteIs256Color}" />
                        <CheckBox Margin="5,1" Content="Tilemap" IsChecked="{Binding SpriteTool.SpriteIsTilemap}" />
                     </UniformGrid>
                     <UniformGrid Columns="2" Margin="5,1">
                        <TextBlock VerticalAlignment="Center" Text="Tile Size:" />
                        <TextBox Text="{Binding SpriteTool.SpriteWidthHeight, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
                     </UniformGrid>
                     <DockPanel Margin="5,1">
                        <TextBlock Width="75" VerticalAlignment="Center">
                           <TextBlock.Style>
                              <Style TargetType="TextBlock">
                                 <Setter Property="Text" Value="Palette Name:"/>
                                 <Style.Triggers>
                                    <DataTrigger Binding="{Binding SpriteTool.SpriteIsTilemap}" Value="True">
                                       <Setter Property="Text" Value="Tileset Name:"/>
                                    </DataTrigger>
                                 </Style.Triggers>
                              </Style>
                           </TextBlock.Style>
                        </TextBlock>
                        <TextBox Text="{Binding SpriteTool.SpritePaletteHint, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
                     </DockPanel>
                  </StackPanel>
                  <TextBlock Margin="5,1" TextWrapping="Wrap" FontStyle="Italic" Foreground="{DynamicResource Error}" Text="Could not find sprite data starting at that address." Visibility="{Binding SpriteTool.ShowNoSpriteAnchorMessage, Converter={StaticResource BoolToVisibility}}"/>

                  <!-- Sprite -->
                  <hsg3hv:PixelImage Margin="0,5,0,2" DataContext="{Binding SpriteTool}" />
                  <DockPanel Visibility="{Binding SpriteTool.HasMultipleSpritePages, Converter={StaticResource BoolToVisibility}}" LastChildFill="False">
                     <Button Content="Previous" Command="{Binding SpriteTool.PreviousSpritePage}" DockPanel.Dock="Left"/>
                     <Button Content="Next" Command="{Binding SpriteTool.NextSpritePage}" DockPanel.Dock="Right"/>
                  </DockPanel>

                  <!-- Palette Address -->
                  <UniformGrid Columns="2" Margin="5,15,5,1">
                     <TextBlock VerticalAlignment="Center" Text="Palette Address:" />
                     <TextBox Text="{Binding SpriteTool.PaletteAddressText, UpdateSourceTrigger=PropertyChanged}" Margin="5">
                        <TextBox.InputBindings>
                           <KeyBinding Key="Return" Command="{Binding SpriteTool.GotoPaletteAddress}" />
                        </TextBox.InputBindings>
                     </TextBox>
                  </UniformGrid>

                  <!-- Palette Properties -->
                  <StackPanel Visibility="{Binding SpriteTool.ShowPaletteProperties, Converter={StaticResource BoolToVisibility}}">
                     <CheckBox Margin="5,1" Content="256 Color Palette" IsChecked="{Binding SpriteTool.PaletteIs256Color}"/>
                     <UniformGrid Columns="2" Margin="5,1">
                        <TextBlock VerticalAlignment="Center" Text="Pages:" />
                        <TextBox Text="{Binding SpriteTool.PalettePages, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>
                     </UniformGrid>
                  </StackPanel>
                  <TextBlock Margin="5,1" TextWrapping="Wrap" FontStyle="Italic" Foreground="{DynamicResource Error}" Text="Could not find palette data starting at that address." Visibility="{Binding SpriteTool.ShowNoPaletteAnchorMessage, Converter={StaticResource BoolToVisibility}}"/>

                  <!-- Palette -->
                  <hsg3hv:PaletteControl DataContext="{Binding SpriteTool.Colors}" />
                  <DockPanel Visibility="{Binding SpriteTool.HasMultiplePalettePages, Converter={StaticResource BoolToVisibility}}" LastChildFill="False">
                     <Button Content="Previous" Command="{Binding SpriteTool.PreviousPalettePage}" DockPanel.Dock="Left"/>
                     <Button Content="Next" Command="{Binding SpriteTool.NextPalettePage}" DockPanel.Dock="Right"/>
                  </DockPanel>
               </StackPanel>
            </ScrollViewer>
            <DockPanel Name="CodeToolPanel">
               <DockPanel.Style>
                  <Style TargetType="DockPanel">
                     <Setter Property="Visibility" Value="Collapsed"/>
                     <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedIndex}" Value="3">
                           <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                     </Style.Triggers>
                  </Style>
               </DockPanel.Style>
               <Grid HorizontalAlignment="Stretch" Margin="2" DockPanel.Dock="Top">
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition Width="Auto" SharedSizeGroup="LeftColumn"/>
                     <ColumnDefinition Width="*"/>
                  </Grid.ColumnDefinitions>
                  <TextBlock Text="Code Type" Margin="5,0" Grid.Column="0"/>
                  <ComboBox Grid.Column="1" Name="CodeModeSelector" SelectedItem="{Binding CodeTool.Mode}"/>
               </Grid>
               <Grid Name="CodeToolBody" DataContext="{Binding CodeTool}">
                  <DockPanel Visibility="{Binding UseSingleContent, Converter={StaticResource BoolToVisibility}}">
                     <Decorator DockPanel.Dock="Top" HorizontalAlignment="Right" ToolTipService.ShowDuration="15000">
                        <Decorator.ToolTip>
                           <TextBlock>
                              Repoint the selected commmands to free space, allowing you to expand this part of the routine. <LineBreak/>
                              <LineBreak/>
                              To use this, you must: <LineBreak/>
                              → Select exactly 4 thumb commands (8 bytes). <LineBreak/>
                              → None of the commands can be branch or ldr-pc commands. <LineBreak/>
                              → At least one command must be a 'mov #' command.
                           </TextBlock>
                        </Decorator.ToolTip>
                        <Button Content="Insert Thumb Hook" Margin="5" Command="{hsv:MethodCommand RepointThumb}">
                           <Button.Style>
                              <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                 <Setter Property="Visibility" Value="Collapsed"/>
                                 <Style.Triggers>
                                    <DataTrigger Binding="{Binding Mode}" Value="Thumb">
                                       <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                 </Style.Triggers>
                              </Style>
                           </Button.Style>
                        </Button>
                     </Decorator>
                     <TextBox UndoLimit="0" Margin="5" FontFamily="Consolas" HorizontalScrollBarVisibility="Auto"
                        Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}"
                        IsReadOnly="{Binding IsReadOnly}" AcceptsReturn="True" VerticalScrollBarVisibility="Auto"/>
                  </DockPanel>
                  <DockPanel Visibility="{Binding UseMultiContent, Converter={StaticResource BoolToVisibility}}">
                     <TextBlock Foreground="{DynamicResource Error}" DockPanel.Dock="Bottom" TextWrapping="Wrap"
                        Text="{Binding ErrorText}"  Visibility="{Binding ShowErrorText, Converter={StaticResource BoolToVisibility}}" />
                     <ScrollViewer PreviewMouseWheel="ScrollCodeContent">
                        <ItemsControl ItemsSource="{Binding Contents}">
                           <ItemsControl.ItemTemplate>
                              <DataTemplate>
                                 <StackPanel>
                                    <TextBlock Text="{Binding Label}" Margin="2,0"/>
                                    <Grid Margin="5">
                                       <TextBox Text="{Binding Content, UpdateSourceTrigger=PropertyChanged}" UndoLimit="0"
                                             HorizontalScrollBarVisibility="Auto"
                                             AcceptsReturn="True" FontFamily="Consolas" SelectionChanged="CodeToolContentsSelectionChanged"/>
                                       <TextBlock Visibility="{Binding IsOpen, ElementName=CodeContentsPopup, Converter={StaticResource BoolToVisibility}}"
                                             HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" FontFamily="Consolas" FontWeight="Bold"/>
                                    </Grid>
                                 </StackPanel>
                              </DataTemplate>
                           </ItemsControl.ItemTemplate>
                        </ItemsControl>
                     </ScrollViewer>
                  </DockPanel>
               </Grid>
            </DockPanel>
         </Grid>

         <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Background="{DynamicResource Backlight}" Width="4" MouseDoubleClick="ResetLeftToolsPane"/>

         <!-- Center Panel-->
         <DockPanel Grid.Column="2">
            <!-- Anchor Editor -->
            <Border DockPanel.Dock="Top" Height="19" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource Backlight}">
               <Grid>
                  <DockPanel Visibility="{Binding AnchorTextVisible, Converter={StaticResource BoolToVisibility}}" >
                     <TextBlock Width="70" Text="Anchor: " TextAlignment="Right" ToolTipService.ShowDuration="15000">
                        <TextBlock.ToolTip>
                           <ToolTip>
                              <TextBlock TextAlignment="Left">
                                 <Bold>Anchor Editor</Bold> <LineBreak/>
                                 Anchors can have a name and a format. <LineBreak/>
                                 <LineBreak/>
                                 Named anchors persist between sessions. <LineBreak/>
                                 You can also use names in pointers and with Goto <Italic Foreground="{DynamicResource Secondary}">(Ctrl+G)</Italic>. <LineBreak/>
                                 <LineBreak/>
                                 Formats change how the data is displayed and edited. <LineBreak/>
                                 For example, "" formats data as text. <LineBreak/>
                                 To learn more about formats, visit the Wiki.
                              </TextBlock>
                           </ToolTip>
                        </TextBlock.ToolTip>
                     </TextBlock>
                     <TextBox Name="AnchorTextBox" SelectionChanged="AnchorSelectionChanged" UndoLimit="0" Text="{Binding AnchorText, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,25,0"/>
                  </DockPanel>
               </Grid>
            </Border>
            <!-- Column Headers -->
            <hsg3hv:HorizontalSlantedTextControl DockPanel.Dock="Top"
               FontSize="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ZoomLevel}"
               HeaderRows="{Binding ColumnHeaders}"
               ColumnWidth="{Binding CellWidth, ElementName=HexContent}"
               HorizontalOffset="{Binding ElementName=HexContent, Path=HorizontalScrollValue}"/>
            <!-- Row Headers -->
            <Grid DockPanel.Dock="Left" ClipToBounds="True" Background="{DynamicResource Backlight}" MouseDown="HeaderMouseDown" Name="HeaderRenderAreaContainer">
               <Grid Name="HeaderRenderArea">
                  <Grid Name="ScrollingHeader" RenderTransform="{Binding RenderTransform, ElementName=ScrollingHexContent}">
                     <Rectangle Name="OldHeader" RenderTransform="{Binding RenderTransform, ElementName=OldContent}">
                        <Rectangle.Fill>
                           <ImageBrush x:Name="OldHeaderBrush"/>
                        </Rectangle.Fill>
                     </Rectangle>
                     <ItemsControl Width="70" ItemsSource="{Binding Headers}" Background="{DynamicResource Backlight}">
                        <ItemsControl.ItemTemplate>
                           <DataTemplate>
                              <Viewbox Height="{Binding CellHeight, ElementName=HexContent}" HorizontalAlignment="Right" Margin="0,0,2,0">
                                 <TextBlock Foreground="{DynamicResource Secondary}" Text="{Binding}" FontFamily="Consolas" Padding="1"/>
                              </Viewbox>
                           </DataTemplate>
                        </ItemsControl.ItemTemplate>
                     </ItemsControl>
                  </Grid>
               </Grid>
            </Grid>

            <Line Width="1" DockPanel.Dock="Left" Stroke="{DynamicResource Background}"/>
            <ScrollBar DockPanel.Dock="Right"
               Minimum="{Binding MinimumScroll}" Maximum="{Binding MaximumScroll}" Value="{Binding ScrollValue}" ViewportSize="{Binding Height}"
               SmallChange="1" LargeChange="{Binding Height}" />
            <ScrollBar DockPanel.Dock="Bottom" Orientation="Horizontal" SmallChange="10" LargeChange="{Binding CellWidth, ElementName=HexContent}"
               Minimum="0" Maximum="{Binding HorizontalScrollMaximum, ElementName=HexContent}" Value="{Binding HorizontalScrollValue, ElementName=HexContent}"
               ViewportSize="{Binding DesiredHorizontalViewportSize, ElementName=HexContent}"
               Visibility="{Binding ShowHorizontalScroll, ElementName=HexContent, Converter={StaticResource BoolToVisibility}}" />
            <Grid Margin=".5,.5,0,0" ClipToBounds="True" Name="HexContentRenderAreaContainer">
               <Grid Name="HexContentRenderArea">
                  <Grid Name="ScrollingHexContent">
                     <Grid.RenderTransform>
                        <TranslateTransform/>
                     </Grid.RenderTransform>
                     <Rectangle Name="OldContent">
                        <Rectangle.Fill>
                           <ImageBrush x:Name="OldContentBrush"/>
                        </Rectangle.Fill>
                        <Rectangle.RenderTransform>
                           <TranslateTransform/>
                        </Rectangle.RenderTransform>
                     </Rectangle>
                     <hsg3hv:HexContent x:Name="HexContent"
                        GotFocus="ShowCursor"
                        LostFocus="HideCursor"
                        ViewPort="{Binding}"
                        FontSize="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ZoomLevel}"
                        ShowGrid="{Binding DataContext.ShowMatrix, RelativeSource={RelativeSource AncestorType=hsg3hw:MainWindow}}"
                        SearchBytes="{Binding DataContext.SearchBytes, RelativeSource={RelativeSource AncestorType=hsg3hw:MainWindow}}"
                        CursorNeedsUpdate="UpdateBlinkyCursor"/>
                     <Rectangle Width="1" Fill="{DynamicResource Secondary}" Visibility="Collapsed" IsHitTestVisible="False" Name="BlinkyCursor" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                  </Grid>
               </Grid>
            </Grid>
         </DockPanel>
      </Grid>
   </DockPanel>
</UserControl>
